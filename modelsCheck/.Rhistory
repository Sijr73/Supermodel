#            |      |
#       -------------
#            |      |
#         -1 |  1   | >= 0
#            |      |
#       -------------
#       c_wt |  0   |>= c^T * v_wt
#            |
#  lb   wt_lb|  0   |
#  ub   wt_ub|10000 |
#            |      |
#  obj    0  | cost |
# ---------------------------------------------
# problem dimensions
# ---------------------------------------------
nc     <- react_num(model)
nr     <- met_num(model)
nCols  <- 2*nc
nRows  <- nr + 2*nc + 1
# ---------------------------------------------
# constraint matrix
# ---------------------------------------------
# the initial matrix dimensions
LHS <- Matrix::Matrix(0,
nrow = nRows,
ncol = nCols,
sparse = TRUE)
# rows for the mutant strain
LHS[1:nr,1:nc] <- S(model)
# location of the mutant strain
fi <- c(1:(nc*2))
# rows for the delta match matrix
diag(LHS[(nr+1)   :(nr+nc)  ,1       :nc    ]) <-  1
diag(LHS[(nr+1)   :(nr+nc)  ,(nc+1)  :(2*nc)]) <-  1
diag(LHS[(nr+nc+1):(nr+2*nc),1       :nc    ]) <- -1
diag(LHS[(nr+nc+1):(nr+2*nc),(nc+1)  :(2*nc)]) <-  1
# fix the value of the objective function
LHS[(nr+2*nc+1),1:nc] <- obj_coef(model)
# ---------------------------------------------
# columns
# ---------------------------------------------
lower  <- c(lowbnd(model), rep(0, nc))
upper  <- c(uppbnd(model), rep(absMAX, nc))
# ---------------------------------------------
# rows
# ---------------------------------------------
rlower <- c(rep(0, nr), rep(0, 2*nc), currmo)
rupper <- c(rep(0, nr), rep(absMAX, 2*nc + 1))
rtype  <- c(rep("E", nr), rep("L", 2*nc + 1))
# ---------------------------------------------
# objective function
# ---------------------------------------------
stopifnot(!is.null(costs))
cobj <- c(rep(0, nc), costs)
# ---------------------------------------------
# row and column names for the problem object
# ---------------------------------------------
if (isTRUE(useNames)) {
if (is.null(cnames)) {
cn <- c(react_id(model),
paste("cost", react_id(model), sep = "_")
)
colNames <- sybil:::.makeLPcompatible(cn, prefix = "x")
}
else {
stopifnot(is(cnames, "character"),
length(cnames) == nCols)
colNames <- cnames
}
if (is.null(rnames)) {
rn <- c(met_id(model),
paste("bw", 1:nc, sep = "_"),
paste("fw", 1:nc, sep = "_"),
"obj_wt"
)
rowNames <- sybil:::.makeLPcompatible(rn, prefix = "r")
}
else {
stopifnot(is(rnames, "character"),
length(rnames) == nRows)
rowNames <- rnames
}
if (is.null(pname)) {
probName <- sybil:::.makeLPcompatible(
paste("armLP", mod_id(model), sep = "_"),
prefix = "")
}
else {
stopifnot(is(pname, "character"),
length(pname) == 1)
probName <- pname
}
}
else {
colNames <- NULL
rowNames <- NULL
probName <- NULL
}
#add easyConstraints:
if(!is.null(easyConstraint)){
if(		length(easyConstraint$react) != length(easyConstraint$x)
| 	length(easyConstraint$react) != length(easyConstraint$rtype)
){
stop("easyConstraint elements have to have equal lengths")
}
stopifnot(is.list(easyConstraint$react))
stopifnot(is.list(easyConstraint$x))
stopifnot(all(easyConstraint$rtype %in% c("F", "L", "U", "D", "E")))
# setting and checking rlb
if(is.null(easyConstraint$lb)){
rlower <- c(rlower, rep(0, length(easyConstraint$react)))
}else{
if(length(easyConstraint$react) != length(easyConstraint$lb)){
stop("easyConstraint$lb length has to match length of react argument")
}else{
stopifnot(is.numeric(easyConstraint$lb))
rlower <- c(rlower, easyConstraint$lb)
}
}
# setting and checking rub
if(is.null(easyConstraint$ub)){
rupper <- c(rupper, rep(0, length(easyConstraint$react)))
}else{
if(length(easyConstraint$react) != length(easyConstraint$ub)){
stop("easyConstraint$ub length has to match length of react argument")
}else{
stopifnot(is.numeric(easyConstraint$ub))
rupper <- c(rupper, easyConstraint$ub)
}
}
m <- Matrix(0, ncol=nCols, nrow=length(easyConstraint$react))
for(i in 1:length(easyConstraint$react)){
m[i, easyConstraint$react[[i]]] <- easyConstraint$x[[i]]
}
LHS <- rbind2(LHS, m)
rtype <- c(rtype, easyConstraint$rtype)
nRows <- nRows + length(easyConstraint$react)
if(!is.null(rowNames)){
rowNames <- c(rowNames, paste0("easyConstraint", 1:length(easyConstraint$react)))
}
}
# ---------------------------------------------
# build problem object
# ---------------------------------------------
.Object <- callNextMethod(.Object,
sbalg      = "armLP",
pType      = "lp",
scaling    = scaling,
fi         = fi,
nCols      = nCols,
nRows      = nRows,
mat        = LHS,
ub         = upper,
lb         = lower,
obj        = cobj,
rlb        = rlower,
rub        = rupper,
rtype      = rtype,
lpdir      = "min",
ctype      = NULL,
cnames     = colNames,
rnames     = rowNames,
pname      = probName,
algPar     = list("biomassThreshold" = biomassThreshold,
"costs" = costs),
...)
.Object@maxobj <- as.numeric(maxobj)
.Object@easyConstraint <- easyConstraint
if (!is.null(writeProbToFileName)) {
writeProb(problem(.Object),
fname = as.character(writeProbToFileName))
}
}
return(.Object)
}
)
#  sysBiolAlg_armLPClass.R
#
#  Copyright (C) 2014 Claus Jonathan Fritzemeier
#  Institute for Informatics, Heinrich-Heine-University, Duesseldorf, Germany.
#  All right reserved.
#  Email: clausjonathan.fritzemeier@hhu.de
#
#  Sybil and SybilSWITCH are free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Sybil and SybilSWITCH are distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with sybilSWITCH.  If not, see <http://www.gnu.org/licenses/>.
#
#------------------------------------------------------------------------------#
# A ctive
# R eaction
# M inimization
#   with
# L inear
# P rogramming
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#           definition of the class sysBiolAlg_armLPEasyConstraint             #
#------------------------------------------------------------------------------#
setClass(Class = "sysBiolAlg_armLPEasyConstraint",
representation(
maxobj = "numeric",
easyConstraint = "list"
),
contains = "sysBiolAlg"
)
#------------------------------------------------------------------------------#
#                            default constructor                               #
#------------------------------------------------------------------------------#
# contructor for class sysBiolAlg_armLP
setMethod(f = "initialize",
signature = "sysBiolAlg_armLPEasyConstraint",
definition = function(.Object,
model,
biomassThreshold = SYBIL_SETTINGS("TOLERANCE")*10,
react = NULL, lb = NULL, ub = NULL,
costs = NULL,
additionalReact  = "numeric",
absMAX = SYBIL_SETTINGS("MAXIMUM"),
useNames = SYBIL_SETTINGS("USE_NAMES"),
cnames = NULL,
rnames = NULL,
pname = NULL,
scaling = NULL,
easyConstraint = NULL,
writeProbToFileName = NULL, ...) {
if ( ! missing(model) ) {
if (is.null(biomassThreshold)) {
stop("no biomassThreshold given")
}
stopifnot(is(model, "modelorg"), is(biomassThreshold, "numeric"))
if (length(biomassThreshold) != 1) {
stop("biomassThreshold has to be length 1")
}
else {
maxobj <- NULL
currmo <- biomassThreshold[1]
}
#  the problem: minimize:
#
#            |      |
#         S  |  0   |  = b
#            |      |
#       -------------
#            |      |
#         1  |  1   | >= 0
#            |      |
#       -------------
#            |      |
#         -1 |  1   | >= 0
#            |      |
#       -------------
#       c_wt |  0   |>= c^T * v_wt
#            |
#  lb   wt_lb|  0   |
#  ub   wt_ub|10000 |
#            |      |
#  obj    0  | cost |
# ---------------------------------------------
# problem dimensions
# ---------------------------------------------
nc     <- react_num(model)
nr     <- met_num(model)
nCols  <- 2*nc
nRows  <- nr + 2*nc + 1
# ---------------------------------------------
# constraint matrix
# ---------------------------------------------
# the initial matrix dimensions
LHS <- Matrix::Matrix(0,
nrow = nRows,
ncol = nCols,
sparse = TRUE)
# rows for the mutant strain
LHS[1:nr,1:nc] <- S(model)
# location of the mutant strain
fi <- c(1:(nc*2))
# rows for the delta match matrix
diag(LHS[(nr+1)   :(nr+nc)  ,1       :nc    ]) <-  1
diag(LHS[(nr+1)   :(nr+nc)  ,(nc+1)  :(2*nc)]) <-  1
diag(LHS[(nr+nc+1):(nr+2*nc),1       :nc    ]) <- -1
diag(LHS[(nr+nc+1):(nr+2*nc),(nc+1)  :(2*nc)]) <-  1
# fix the value of the objective function
LHS[(nr+2*nc+1),1:nc] <- obj_coef(model)
# ---------------------------------------------
# columns
# ---------------------------------------------
lower  <- c(lowbnd(model), rep(0, nc))
upper  <- c(uppbnd(model), rep(absMAX, nc))
# ---------------------------------------------
# rows
# ---------------------------------------------
rlower <- c(rep(0, nr), rep(0, 2*nc), currmo)
rupper <- c(rep(0, nr), rep(absMAX, 2*nc + 1))
rtype  <- c(rep("E", nr), rep("L", 2*nc + 1))
# ---------------------------------------------
# objective function
# ---------------------------------------------
stopifnot(!is.null(costs))
cobj <- c(rep(0, nc), costs)
# ---------------------------------------------
# row and column names for the problem object
# ---------------------------------------------
if (isTRUE(useNames)) {
if (is.null(cnames)) {
cn <- c(react_id(model),
paste("cost", react_id(model), sep = "_")
)
colNames <- sybil:::.makeLPcompatible(cn, prefix = "x")
}
else {
stopifnot(is(cnames, "character"),
length(cnames) == nCols)
colNames <- cnames
}
if (is.null(rnames)) {
rn <- c(met_id(model),
paste("bw", 1:nc, sep = "_"),
paste("fw", 1:nc, sep = "_"),
"obj_wt"
)
rowNames <- sybil:::.makeLPcompatible(rn, prefix = "r")
}
else {
stopifnot(is(rnames, "character"),
length(rnames) == nRows)
rowNames <- rnames
}
if (is.null(pname)) {
probName <- sybil:::.makeLPcompatible(
paste("armLP", mod_id(model), sep = "_"),
prefix = "")
}
else {
stopifnot(is(pname, "character"),
length(pname) == 1)
probName <- pname
}
}
else {
colNames <- NULL
rowNames <- NULL
probName <- NULL
}
#add easyConstraints:
if(!is.null(easyConstraint)){
if(		length(easyConstraint$react) != length(easyConstraint$x)
| 	length(easyConstraint$react) != length(easyConstraint$rtype)
){
stop("easyConstraint elements have to have equal lengths")
}
stopifnot(is.list(easyConstraint$react))
stopifnot(is.list(easyConstraint$x))
stopifnot(all(easyConstraint$rtype %in% c("F", "L", "U", "D", "E")))
# setting and checking rlb
if(is.null(easyConstraint$lb)){
rlower <- c(rlower, rep(0, length(easyConstraint$react)))
}else{
if(length(easyConstraint$react) != length(easyConstraint$lb)){
stop("easyConstraint$lb length has to match length of react argument")
}else{
stopifnot(is.numeric(easyConstraint$lb))
rlower <- c(rlower, easyConstraint$lb)
}
}
# setting and checking rub
if(is.null(easyConstraint$ub)){
rupper <- c(rupper, rep(0, length(easyConstraint$react)))
}else{
if(length(easyConstraint$react) != length(easyConstraint$ub)){
stop("easyConstraint$ub length has to match length of react argument")
}else{
stopifnot(is.numeric(easyConstraint$ub))
rupper <- c(rupper, easyConstraint$ub)
}
}
m <- Matrix(0, ncol=nCols, nrow=length(easyConstraint$react))
for(i in 1:length(easyConstraint$react)){
m[i, easyConstraint$react[[i]]] <- easyConstraint$x[[i]]
}
LHS <- rbind2(LHS, m)
rtype <- c(rtype, easyConstraint$rtype)
nRows <- nRows + length(easyConstraint$react)
if(!is.null(rowNames)){
rowNames <- c(rowNames, paste0("easyConstraint", 1:length(easyConstraint$react)))
}
}
# ---------------------------------------------
# build problem object
# ---------------------------------------------
.Object <- callNextMethod(.Object,
sbalg      = "armLP",
pType      = "lp",
scaling    = scaling,
fi         = fi,
nCols      = nCols,
nRows      = nRows,
mat        = LHS,
ub         = upper,
lb         = lower,
obj        = cobj,
rlb        = rlower,
rub        = rupper,
rtype      = rtype,
lpdir      = "min",
ctype      = NULL,
cnames     = colNames,
rnames     = rowNames,
pname      = probName,
algPar     = list("biomassThreshold" = biomassThreshold,
"costs" = costs),
...)
.Object@maxobj <- as.numeric(maxobj)
.Object@easyConstraint <- easyConstraint
if (!is.null(writeProbToFileName)) {
writeProb(problem(.Object),
fname = as.character(writeProbToFileName))
}
}
return(.Object)
}
)
getArmAddedReactions <- function(model=NULL, res=NULL, additionalReact=NULL){
if(is(res, "optsol_optimizeProb")){
f <- fluxes(res)
}
else{
f <- res$fluxes
}
intersect(which(getArmReactionState(model, f)), additionalReact)
}
getArmReactionFluxes <- function(model, res){
# returns flux values of reactions
if(is(res, "optsol_optimizeProb")){
f <- fluxes(res)
}
else{
f <- res$fluxes
}
stopifnot(length(f)==react_num(model)*2)
f[1:react_num(model)]
}
getArmReactionState <- function(model, f){
# returns TRUE for reactions switched on
round(f[react_num(model)+(1:react_num(model))], digits=-log10(SYBIL_SETTINGS("TOLERANCE")))==1
}
library(methods)
library(sybil)
library(cplexAPI)
library(sybilSWITCH)
SYBIL_SETTINGS("SOLVER", "cplexAPI")
threadCount <- 4
if(!interactive()){
args <- commandArgs(trailingOnly = TRUE)
calcOnly <- as.integer(args[1])
}else{
calcOnly <- 1
}
print(load("New analysis bacillus/DATA/universalBiGG.ver1.2.Rdata"))
print(load("New analysis bacillus/DATA/universalBiGG.ver1.2.Rdata"))
library(methods)
library(sybil)
library(cplexAPI)
library(sybilSWITCH)
SYBIL_SETTINGS("SOLVER", "cplexAPI")
threadCount <- 4
if(!interactive()){
args <- commandArgs(trailingOnly = TRUE)
calcOnly <- as.integer(args[1])
}else{
calcOnly <- 1
}
print(load("New analysis bacillus/DATA/universalBiGG.ver1.2.Rdata"))
uni <- uni1.2
#!/usr/bin/Rscript
library(methods)
library(parallel)
library(sybil)
#!/usr/bin/Rscript
library(methods)
library(parallel)
library(sybil)
library(CHNOSZ)
library(rjson)
library(methods)
library(sybil)
library(cplexAPI)
library(sybilSWITCH)
SYBIL_SETTINGS("SOLVER", "cplexAPI")
threadCount <- 4
if(!interactive()){
args <- commandArgs(trailingOnly = TRUE)
calcOnly <- as.integer(args[1])
}else{
calcOnly <- 1
}
print(load("New analysis bacillus/DATA/universalBiGG.ver1.2.Rdata"))
#!/usr/bin/Rscript
library(methods)
library(sybil)
library(parallel)
library(CHNOSZ)
options(warn=1) # report warnings as they occur
source("New analysis bacillus/networkComplexityBigg-master/modelsCheck/checkFunctions.R")
